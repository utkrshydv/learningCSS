## gradient button : 

gradient is treated like an image

border-image: linear-gradient(degrees, color) slicevalue; just keep slicevalue = 1

also there's radial gradient too, like a circle


align-items used for vertical axis
justify-content used for horizontal axis
works only when display:flex

button:hover to appply effects when hovering over that button

## flexbox example 1:

flex-wrap : wrap -> allows wrap
flex-shrink: 0/1 -> allows getting smaller
flex-grow: 0/1 -> allows getting bigger

min-wdith & max-width -> limit flex-grow and shrink

to center something -> 
display: flex;
justify-content: center;
align-items: center;

also when we allow wrap and lets's say there are 3 rows with 3 elements eeach 

we use align-content to control the space between the rows

## expanding search bar

input box with type="search"

input:focus{} -> controls what happens when we click on items
input::placeholder{} -> used for placeholder text
input:focus::placeholder{} -> what happens to placeholder on focus

also keeping a transition: all 0.2s ease; in input{} controls both in and out of focus


yt-video-card: 

<body>  ‚Üê flex container
  ‚îî‚îÄ‚îÄ <div class="video-preview">  ‚Üê flex item
        ‚îú‚îÄ‚îÄ <div>IMG</div>         ‚Üê normal block inside
        ‚îî‚îÄ‚îÄ <div>TEXT</div>        ‚Üê normal block inside

flex only affects the direct children


to remove all anchor default styles -> a{
  all: unset
}

box-shadow: offset-x offset-y blur-radius spread-radius color;

## loading-animation:

attribute selector -> 
element['attribute']{
  //styles
}

eg: 
a[type='text']{
  //styles
}

this selects
<a href="#" type="text"></a>

nth child -> 
css pseudo-classs selector used to target elements based on their order within their parent

element:nth-child(n){
 //styles
}

n -> number or keyword or formula


for eg: 

<ul>
  <li>One</li>
  <li>Two ‚Üê üéØ</li>
  <li>Three</li>
</ul>


//to select the 2nd child

li:nth-child(2){
  color: red;
}


eg: for even numbered childer:

p:nth-child(even){
  background: lightgray;
}

eg: for odd numbered children:

p:nth-child(odd){
  background: lightgray
}

eg: use formula

div: nth-child(2n){
  border: 1px solid black;
}

2n -> 2, 4, 6, 8....
puts values in place of normal

:nth-child(n) is based on position in the parent, not the type of element.

Example:

<div>
  <p>First</p>
  <span>Second</span>
  <p>Third</p>
</div>

<style>
  p:nth-child(2) {
    color: red;
  }
</style>
Here, the 2nd child is a <span>, so the rule p:nth-child(2) matches nothing.

‚úÖ If you want to match the 2nd <p> regardless of other elements
Use :nth-of-type() instead:

css
Copy
Edit
p:nth-of-type(2) {
  color: red;
}

animation -> 

used when the element requires more than 2 states 
or some constant animation


we need to first create animation using @keyframe



.element{
  animation-duration: {time};
  animation-name: {animation-name};
  animation-timing: ease / linear / ease-in / ease-out / ease-in-out;
  animation-delay: {time};
  animation-iteration-count: {number};
  animation-direction: reverse / alternate / normal; 
  animation-fill-mode: forwards;
  animation-play-state: running / paused;
}

//animation-timing -> determines the speed curve of the animation

//animation-delay -> duration for which it has to wait before the animation starts

//animation-iteration-count -> how many times animation repeats

//animation-direction -> reverse : plays 100% to 0% 
//alternate: plays forward then backwards

//animation-fill-mode -> forwards : stops the animation at the last frame

//animation-play-state -> controls if the element is runnig or paused based on events like hover

//all of this can be combined in a single property 

animation: {animation-time} {animation-name} {animation-timing-function} {animation-delay} {animation-iteration-count} {animation-count}


@keyframe {animation-name}{
  0%{
    //styles
  }
  50%{
    //styles
  }
  100%{
    //styles
  }
}

these 0%..100% value represent some specific duration during the whole process


## dart-board:

visibilty: hidden -> hides element but reserves the space

display: none -> hides element, doesnt reserve space

position: static / relative / absolute / fixed / sticky

default -> static

1. static (default)
This is the default position.

The element follows the normal document flow.

You can‚Äôt use top, left, right, or bottom with it.

div {
  position: static;
}

2. relative
The element stays in its original place, but you can move it slightly using top, left, etc.

Space it originally occupied is still reserved.

div {
  position: relative;
  top: 20px;  /* Moves down 20px */
  left: 30px; /* Moves right 30px */
}
üß† Think of this as: ‚ÄúMove me a bit from where I would normally be.‚Äù

3. absolute

The element is removed from normal flow (no space reserved).

It's positioned relative to the nearest parent that has position: relative or absolute or fixed. If none exists, it uses the <html> (page itself).

.parent {
  position: relative;
}
.child {
  position: absolute;
  top: 0;
  left: 0;
}
üß† Use absolute when you want to place something freely inside a box (like badges, tooltips, overlays).

4. fixed
The element is positioned relative to the browser window.

It stays in place even when the page scrolls.

.fixed-box {
  position: fixed;
  top: 10px;
  right: 10px;
}
üß† Use this for things like: sticky navbars, chat buttons, or back to top icons.

5. sticky
A hybrid of relative + fixed.

It behaves like relative until you scroll, then it becomes fixed.

.sticky-header {
  position: sticky;
  top: 0;
  background: white;
}
üß† Perfect for sticky headers or sidebars that stay in view while scrolling

 What is setInterval?
setInterval(fn, time) is a loop that runs the function fn every time milliseconds ‚Äî forever, unless you stop it.

So this:

const id = setInterval(() => {
  console.log("Hi!");
}, 1000);
Will print "Hi!" every second forever.

üî• Why use clearInterval()?
To stop the interval from running forever.

You use:

clearInterval(id);
To stop the interval with the ID returned by setInterval().


## word-carousel: 

selectors ->

div p{
  //styles
}

this selects all p inisde div

div > p{
  //styles
}

selects immediate paragraph child


div+p{
  //styles
}

selects paragraphs whose previous siblings are div

for eg: 

<div>

<div></div>
<p></p> <- selected
</div>
<p></p> <- selected

both are selected

::before and  ::after -> pseudo elements
they insert virtual elements before or after the actual content of an html element without changing the html element

.element::before {
  content: "Hello ";
}

.element::after {
  content: "!";
}


## github-infocard : 

object-fit: cover ‚Üê (best for profile pictures!)
Fills the container

Keeps aspect ratio

Crops extra parts (like zooming in)

No stretching

Result:
Image fills the 200x200 box, but parts of it get cropped if they don't fit.


##toggle-switch :

<label> </label>

1. <label for="toggle">
A label is a clickable text or area associated with an input.

The for="toggle" attribute connects this label to the input with id="toggle".

Clicking the label will toggle the checkbox (input), because it's linked to it.

<label for="toggle">
<input type="checkbox" id="toggle">
some text
</label>


now if i click on some text, checkbox will be ticked


In Flexbox:
flex-direction: row (default) ‚Üí gap adds horizontal space between items.

flex-direction: column ‚Üí gap adds vertical space between items.

What does this selector mean: .toggle-input:checked ~ .toggle-switch?
This is called the general sibling combinator (~). Let's break it down:

.toggle-input:checked ~ .toggle-switch
‚úÖ This means:
‚ÄúSelect the .toggle-switch that is a sibling (comes after) a .toggle-input that is :checked.‚Äù

In simpler words:

If the checkbox is checked,

And there is a .toggle-switch after it in the same parent (sibling),

Then apply the style (e.g., change color to blue).

Your structure is like:

<label>
  <input class="toggle-input">
  <div class="toggle-switch"></div> <!-- this is a sibling AFTER the input -->
</label>

Since the .toggle-switch is a next sibling, the ~ combinator finds it and changes its style when the checkbox is checked.

What is cubic-bezier?
It's a custom timing function used in CSS animations and transitions.
It lets you control the speed curve of an animation ‚Äî how fast it starts, slows down, or bounces.